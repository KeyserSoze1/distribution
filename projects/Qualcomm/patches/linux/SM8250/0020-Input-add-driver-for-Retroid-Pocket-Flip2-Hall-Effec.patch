From 78c9a7dc773489af9ff701f5b4ae91bd38a6b862 Mon Sep 17 00:00:00 2001
From: spycat88 <spycat88@users.noreply.github.com>
Date: Thu, 1 May 2025 22:38:51 +0100
Subject: [PATCH] Input: add driver for Retroid Pocket Flip2 Hall Effect Sensor

---
 drivers/input/misc/Makefile              |   1 +
 drivers/input/misc/rpflip2-hall-sensor.c | 252 +++++++++++++++++++++++
 2 files changed, 253 insertions(+)
 create mode 100644 drivers/input/misc/rpflip2-hall-sensor.c

diff --git a/drivers/input/misc/Makefile b/drivers/input/misc/Makefile
index 0d3afb906e61..24cbfeb32e49 100644
--- a/drivers/input/misc/Makefile
+++ b/drivers/input/misc/Makefile
@@ -93,3 +93,4 @@ obj-$(CONFIG_INPUT_WM831X_ON)		+= wm831x-on.o
 obj-$(CONFIG_INPUT_XEN_KBDDEV_FRONTEND)	+= xen-kbdfront.o
 obj-$(CONFIG_INPUT_YEALINK)		+= yealink.o
 obj-$(CONFIG_INPUT_IDEAPAD_SLIDEBAR)	+= ideapad_slidebar.o
+obj-m += rpflip2-hall-sensor.o
diff --git a/drivers/input/misc/rpflip2-hall-sensor.c b/drivers/input/misc/rpflip2-hall-sensor.c
new file mode 100644
index 000000000000..d7ab4bf38d63
--- /dev/null
+++ b/drivers/input/misc/rpflip2-hall-sensor.c
@@ -0,0 +1,252 @@
+// SPDX-License-Identifier: GPL-2.0-only
+/*
+ * Retroid Pocket Flip2 Hall Effect Sensor Driver
+ *
+ * Copyright (c) 2025 ROCKNIX <https://rocknix.org>
+ */
+
+#include <linux/kernel.h>
+#include <linux/module.h>
+#include <linux/init.h>
+#include <linux/device.h>
+#include <linux/fs.h>
+#include <linux/interrupt.h>
+#include <linux/platform_device.h>
+#include <linux/gpio/consumer.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
+#include <linux/of_gpio.h>
+#include <linux/input.h>
+#include <linux/workqueue.h>
+#include <linux/delay.h>
+#include <linux/slab.h>
+#include <linux/pm.h>
+
+#define DRIVER_NAME "rpflip2_hall_sensor"
+
+struct hall_sensor_data {
+	struct platform_device *pdev;
+	struct device *dev;
+	struct input_dev *input;
+	struct gpio_desc *hall_gpio;
+	int irq;
+	struct work_struct work;
+	bool wakeup_enabled;
+	bool initialized;
+};
+
+static void hall_sensor_work_func(struct work_struct *work)
+{
+	struct hall_sensor_data *hall_data =
+		container_of(work, struct hall_sensor_data, work);
+	int gpio_state;
+
+	if (!hall_data || !hall_data->initialized) {
+		pr_err("Hall sensor: work function called before initialization\n");
+		return;
+	}
+
+	if (!hall_data->hall_gpio) {
+		dev_err(hall_data->dev, "GPIO not initialized\n");
+		return;
+	}
+
+	if (!hall_data->input) {
+		dev_err(hall_data->dev, "Input device not initialized\n");
+		return;
+	}
+
+	gpio_state = gpiod_get_value_cansleep(hall_data->hall_gpio);
+
+	if (gpio_state) {
+		/* Lid open or similar state */
+		input_report_key(hall_data->input, KEY_WAKEUP, 1);
+		input_report_key(hall_data->input, KEY_WAKEUP, 0);
+		input_sync(hall_data->input);
+		dev_dbg(hall_data->dev, "Hall sensor: wake event\n");
+	} else {
+		/* Lid closed or similar state */
+		input_report_key(hall_data->input, KEY_SLEEP, 1);
+		input_report_key(hall_data->input, KEY_SLEEP, 0);
+		input_sync(hall_data->input);
+		dev_dbg(hall_data->dev, "Hall sensor: sleep event\n");
+	}
+}
+
+static irqreturn_t hall_sensor_irq_handler(int irq, void *dev_id)
+{
+	struct hall_sensor_data *hall_data = dev_id;
+
+	/* Schedule work to handle the event outside interrupt context */
+	if (hall_data && hall_data->initialized) {
+		schedule_work(&hall_data->work);
+	}
+
+	return IRQ_HANDLED;
+}
+
+static int hall_sensor_input_init(struct hall_sensor_data *hall_data)
+{
+	int ret;
+
+	hall_data->input = devm_input_allocate_device(hall_data->dev);
+	if (!hall_data->input) {
+		dev_err(hall_data->dev, "Failed to allocate input device\n");
+		return -ENOMEM;
+	}
+
+	hall_data->input->name = DRIVER_NAME;
+	hall_data->input->phys = "hall/input0";
+	hall_data->input->dev.parent = hall_data->dev;
+
+	input_set_capability(hall_data->input, EV_KEY, KEY_SLEEP);
+	input_set_capability(hall_data->input, EV_KEY, KEY_WAKEUP);
+
+	ret = input_register_device(hall_data->input);
+	if (ret) {
+		dev_err(hall_data->dev, "Failed to register input device: %d\n", ret);
+		return ret;
+	}
+
+	return 0;
+}
+
+static int hall_sensor_probe(struct platform_device *pdev)
+{
+	struct hall_sensor_data *hall_data;
+	int ret;
+
+	hall_data = devm_kzalloc(&pdev->dev, sizeof(*hall_data), GFP_KERNEL);
+	if (!hall_data)
+		return -ENOMEM;
+
+	hall_data->pdev = pdev;
+	hall_data->dev = &pdev->dev;
+	hall_data->initialized = false;
+
+	platform_set_drvdata(pdev, hall_data);
+
+	/* Initialize work queue item */
+	INIT_WORK(&hall_data->work, hall_sensor_work_func);
+
+	/* Get GPIO from device tree */
+	hall_data->hall_gpio = devm_gpiod_get(&pdev->dev, "hall", GPIOD_IN);
+	if (IS_ERR(hall_data->hall_gpio)) {
+		ret = PTR_ERR(hall_data->hall_gpio);
+		dev_err(&pdev->dev, "Failed to get hall GPIO: %d\n", ret);
+		return ret;
+	}
+
+	/* Initialize input device first before setting up the interrupt */
+	ret = hall_sensor_input_init(hall_data);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to initialize input subsystem\n");
+		return ret;
+	}
+
+	/* Set up interrupt */
+	hall_data->irq = gpiod_to_irq(hall_data->hall_gpio);
+	if (hall_data->irq < 0) {
+		dev_err(&pdev->dev, "Failed to map GPIO to IRQ: %d\n", hall_data->irq);
+		return hall_data->irq;
+	}
+
+	/* Now mark as initialized before requesting the IRQ */
+	hall_data->initialized = true;
+
+	ret = devm_request_irq(&pdev->dev, hall_data->irq, hall_sensor_irq_handler,
+			     IRQF_TRIGGER_RISING | IRQF_TRIGGER_FALLING,
+			     "hall_sensor", hall_data);
+	if (ret) {
+		dev_err(&pdev->dev, "Failed to request IRQ: %d\n", ret);
+		hall_data->initialized = false;  /* Reset if failed */
+		return ret;
+	}
+
+	/* Set up wake capability */
+	device_init_wakeup(&pdev->dev, true);
+	hall_data->wakeup_enabled = true;
+
+	/* Enable wake IRQ */
+	ret = enable_irq_wake(hall_data->irq);
+	if (ret) {
+		dev_warn(&pdev->dev, "Failed to enable wake IRQ: %d\n", ret);
+		hall_data->wakeup_enabled = false;
+	}
+
+	/* Initial state check - now safe to schedule work */
+	schedule_work(&hall_data->work);
+
+	dev_info(&pdev->dev, "Hall sensor driver initialized\n");
+
+	return 0;
+}
+
+static void hall_sensor_remove(struct platform_device *pdev)
+{
+	struct hall_sensor_data *hall_data = platform_get_drvdata(pdev);
+
+	/* Mark as not initialized before canceling work */
+	if (hall_data)
+		hall_data->initialized = false;
+
+	cancel_work_sync(&hall_data->work);
+
+	if (hall_data && hall_data->wakeup_enabled && hall_data->irq) {
+		disable_irq_wake(hall_data->irq);
+		device_init_wakeup(&pdev->dev, false);
+	}
+
+	dev_info(&pdev->dev, "Hall sensor driver removed\n");
+}
+
+#ifdef CONFIG_PM_SLEEP
+static int hall_sensor_suspend(struct device *dev)
+{
+	struct hall_sensor_data *hall_data = dev_get_drvdata(dev);
+
+	if (device_may_wakeup(dev) && hall_data && hall_data->irq)
+		enable_irq_wake(hall_data->irq);
+
+	return 0;
+}
+
+static int hall_sensor_resume(struct device *dev)
+{
+	struct hall_sensor_data *hall_data = dev_get_drvdata(dev);
+
+	if (device_may_wakeup(dev) && hall_data && hall_data->irq)
+		disable_irq_wake(hall_data->irq);
+
+	/* Check state on resume - only if initialized */
+	if (hall_data && hall_data->initialized)
+		schedule_work(&hall_data->work);
+
+	return 0;
+}
+#endif
+
+static SIMPLE_DEV_PM_OPS(hall_sensor_pm_ops,
+			 hall_sensor_suspend, hall_sensor_resume);
+
+static const struct of_device_id hall_sensor_of_match[] = {
+	{ .compatible = "rocknix,rpflip2-hall-sensor", },
+	{ },
+};
+MODULE_DEVICE_TABLE(of, hall_sensor_of_match);
+
+static struct platform_driver hall_sensor_driver = {
+	.probe = hall_sensor_probe,
+	.remove = hall_sensor_remove,
+	.driver = {
+		.name = DRIVER_NAME,
+		.of_match_table = hall_sensor_of_match,
+		.pm = &hall_sensor_pm_ops,
+	},
+};
+
+module_platform_driver(hall_sensor_driver);
+
+MODULE_AUTHOR("ROCKNIX (https://rocknix.org)");
+MODULE_DESCRIPTION("Retroid Pocket Flip2 Hall Effect Sensor Driver");
+MODULE_LICENSE("GPL");
-- 
2.34.1

