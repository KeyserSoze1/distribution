#!/bin/bash
# SPDX-License-Identifier: GPL-2.0
# Copyright (C) 2024 ROCKNIX (https://github.com/ROCKNIX)

# Script configuration and global variables
SCRIPT_NAME=$(basename "$0")
LOG_FILE="/var/log/cloud_sync.log"
START_TIME=$(date +%s)

# Logging function that supports different severity levels and optional console output
# Parameters:
#   $1: Message text
#   $2: Whether to echo to screen (true/false, defaults to true)
#   $3: Log level (INFO, WARN, ERROR, defaults to INFO)
log_message() {
    local message="$1"
    local echo_to_screen="${2:-true}"  # Default to true
    local level="${3:-INFO}"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    
    echo "[${timestamp}] [${level}] [${SCRIPT_NAME}] ${message}" >> ${LOG_FILE}
    
    if [[ "${echo_to_screen}" == "true" ]]; then
        # Color output based on level
        case "${level}" in
            ERROR) echo -e "\e[31m${message}\e[0m" ;;
            WARN)  echo -e "\e[33m${message}\e[0m" ;;
            *)     echo -e "${message}" ;;
        esac
    fi
}

# Performs cleanup operations and exits with the specified code
# Records total execution time in the log for performance tracking
# Parameters:
#   $1: Exit code to return
clean_exit() {
    local exit_code=$1
    local duration=$(($(date +%s) - START_TIME))
    
    log_message "Script completed in ${duration} seconds with exit code ${exit_code}" "false"
    exit ${exit_code}
}

# Verifies rclone is properly configured before attempting operations
# Exits with error if configuration file is missing
check_rclone_config() {
    if [ ! -e "/storage/.config/rclone/rclone.conf" ]; then
        log_message "You must configure rclone before using this tool. Run \`rclone config\` to get started." "true" "ERROR"
        sleep 3
        clean_exit 1
    fi
}

# Validates internet connectivity before attempting cloud operations
# Uses ping to google.com as a connectivity test
check_internet() {
    log_message "Checking internet connectivity..." "false"
    ONLINESTATUS=`ping -q -c1 google.com &>/dev/null && echo online || echo offline`
    if [ "${ONLINESTATUS}" == "offline" ]; then
        log_message "You're not currently connected to the internet.\nPlease verify your settings and then try again." "true" "ERROR"
        sleep 3
        clean_exit 1
    fi
    log_message "Internet connection detected" "false"
}

# Loads user configuration from cloud_sync.conf
# Applies default values for any missing configuration parameters
load_config() {
    log_message "Loading configuration from cloud_sync.conf" "false"
    source /storage/.config/cloud_sync.conf
    
    # Check if needed variables are present, add if necessary
    if [ "${BACKUPPATH}" == "" ] || [ "${RESTOREPATH}" == "" ] || [ "${SYNCPATH}" == "" ] || [ "${RCLONEOPTS}" == "" ] || [ "${BACKUPMETHOD}" == "" ] || [ "${RESTOREMETHOD}" == "" ] || [ "${RSYNCRMDIR}" == "" ] || [ "${BACKUPFOLDER}" == "" ] || [ "${SYNCPATH_BACKUP}" == "" ] || [ "${BACKUPFILE_BACKUP_OPTION}" == "" ] || [ "${BACKUPFILE_RESTORE_OPTION}" == "" ]; then
        log_message "Some configuration variables missing, loading defaults" "false" "WARN"
        source /storage/.config/cloud_sync.conf.defaults
        if [ "${BACKUPPATH}" == "" ]; then
            sed -i -e '$a\\nBACKUPPATH="'"${DEFAULT_BACKUPPATH}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${RESTOREPATH}" == "" ]; then
            sed -i -e '$a\\nRESTOREPATH="'"${DEFAULT_RESTOREPATH}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${SYNCPATH}" == "" ]; then
            sed -i -e '$a\\nSYNCPATH="'"${DEFAULT_SYNCPATH}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${RCLONEOPTS}" == "" ]; then
            sed -i -e '$a\\nRCLONEOPTS="'"${DEFAULT_RCLONEOPTS}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${BACKUPMETHOD}" == "" ]; then
            sed -i -e '$a\\nBACKUPMETHOD="'"${DEFAULT_BACKUPMETHOD}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${RESTOREMETHOD}" == "" ]; then
            sed -i -e '$a\\nRESTOREMETHOD="'"${DEFAULT_RESTOREMETHOD}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${RSYNCRMDIR}" == "" ]; then
            sed -i -e '$a\\nRSYNCRMDIR="'"${DEFAULT_RSYNCRMDIR}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${BACKUPFOLDER}" == "" ]; then
            sed -i -e '$a\\nBACKUPFOLDER="'"${DEFAULT_BACKUPFOLDER}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${SYNCPATH_BACKUP}" == "" ]; then
            sed -i -e '$a\\nSYNCPATH_BACKUP="'"${DEFAULT_SYNCPATH}/backup"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${BACKUPFILE_BACKUP_OPTION}" == "" ]; then
            sed -i -e '$a\\nBACKUPFILE_BACKUP_OPTION="'"${DEFAULT_BACKUPFILE_BACKUP_OPTION}"'"' /storage/.config/cloud_sync.conf
        fi
        if [ "${BACKUPFILE_RESTORE_OPTION}" == "" ]; then
            sed -i -e '$a\\nBACKUPFILE_RESTORE_OPTION="'"${DEFAULT_BACKUPFILE_RESTORE_OPTION}"'"' /storage/.config/cloud_sync.conf
        fi
        source /storage/.config/cloud_sync.conf
    fi
    
    RESTORE_RCLONEOPTS=$(echo "${RCLONEOPTS}" | sed 's/--delete-excluded//')
    
    log_message "Configuration loaded successfully" "false"
}

# PART 1: Game saves restore function
# Restores game saves from cloud storage
restore_game_saves() {
    log_message "====================================" "true"
    log_message "STARTING GAME SAVES RESTORE" "true"
    log_message "====================================" "true"
    
    log_message "Starting restore from ${REMOTENAME}${SYNCPATH} to ${RESTOREPATH}"
    log_message "Restore started at $(date)" "false"
    
    rclone ${RESTOREMETHOD} \
      ${RESTORE_RCLONEOPTS} \
      ${REMOTENAME}${SYNCPATH}/ ${RESTOREPATH}/
    
    RESTORE_STATUS=$?
    if [ $RESTORE_STATUS -eq 0 ]; then
        log_message "Game saves restore completed successfully" "true"
    else
        log_message "Game saves restore completed with errors (status $RESTORE_STATUS)" "true" "WARN"
    fi
    
    log_message "Game saves restore from ${REMOTENAME}${SYNCPATH} complete!"
    
    return $RESTORE_STATUS
}

# PART 2: System backup file restore function
# Restores system backup files from cloud storage
# Only runs when BACKUPFILE_RESTORE_OPTION is set to "yes"
restore_system_files() {
    echo
    log_message "====================================" "true"
    log_message "STARTING SYSTEM BACKUP FILE RESTORE" "true"
    log_message "====================================" "true"
    
    if [ "${BACKUPFILE_RESTORE_OPTION}" == "yes" ]; then
        # Verify remote backup directory has content before attempting restore
        REMOTE_FILES=$(rclone ls ${REMOTENAME}${SYNCPATH_BACKUP}/ 2>/dev/null)
        if [ -z "${REMOTE_FILES}" ]; then
            log_message "There are no system backup files to restore" "true" "WARN"
            return 1
        fi
        
        log_message "Starting restore of system backup files from ${REMOTENAME}${SYNCPATH_BACKUP} to ${BACKUPFOLDER}"
        log_message "System backup file restore started at $(date)" "false"
        
        # Ensure local target directory exists before attempting restore
        mkdir -p ${BACKUPFOLDER}
        
        # Adjust filter rules to handle potential path mismatches
        rclone ${RESTOREMETHOD} \
          ${RCLONEOPTS} \
          --include "/backup/*.zip" \
          --include "backup/*.zip" \
          ${REMOTENAME}${SYNCPATH_BACKUP}/ ${BACKUPFOLDER}/
        
        RESTORE_SYSTEM_STATUS=$?
        if [ $RESTORE_SYSTEM_STATUS -eq 0 ]; then
            log_message "System backup file restore completed successfully" "true"
        else
            log_message "System backup file restore completed with errors (status $RESTORE_SYSTEM_STATUS)" "true" "WARN"
        fi
        
        log_message "System backup file restore from ${REMOTENAME}${SYNCPATH_BACKUP} complete!"
    else
        log_message "System backup file restore skipped (BACKUPFILE_RESTORE_OPTION is not set to 'yes')" "true"
        RESTORE_SYSTEM_STATUS=0
    fi
    
    return $RESTORE_SYSTEM_STATUS
}

# Main script execution
main() {
    check_rclone_config
    check_internet
    load_config
    
    # Define locations for source and remote
    REMOTENAME=`rclone listremotes | head -1`
    
    # Begin main script operations
    log_message "=> ${OS_NAME} CLOUD RESTORE UTILITY\n"
    
    # Execute Part 1: Game saves restore
    restore_game_saves
    RESTORE_STATUS=$?
    
    # Add a pause for better visual separation
    sleep 2
    
    # Execute Part 2: System restore
    restore_system_files
    RESTORE_SYSTEM_STATUS=$?
    
    # Create empty missing system directories if removed during restore
    # Only necessary when using sync method which can delete files
    if [ "${RESTOREMETHOD}" == "sync" ]; then
        log_message "Creating empty missing system directories" "true"
        systemd-tmpfiles --create /usr/config/system-dirs.conf
    fi
    
    # Add a pause before summary
    sleep 2
    
    # Provide final summary of all operations
    echo
    log_message "====================================" "true"
    log_message "RESTORE SUMMARY:" "true"
    log_message "Game saves restore: $([ $RESTORE_STATUS -eq 0 ] && echo 'SUCCESS' || echo 'COMPLETED WITH ERRORS')" "true"
    [ "${BACKUPFILE_RESTORE_OPTION}" == "yes" ] && log_message "System backup file restore: $([ $RESTORE_SYSTEM_STATUS -eq 0 ] && echo 'SUCCESS' || echo 'COMPLETED WITH ERRORS')" "true"
    log_message "Log file: ${LOG_FILE}" "true"
    log_message "====================================" "true"
    
    # Add a final pause before exiting
    sleep 3
    
    # Use the game saves restore status as the overall exit code
    clean_exit ${RESTORE_STATUS}
}

# Set up signal trap to handle user interruption gracefully
trap 'log_message "Script interrupted by user" "false" "WARN"; clean_exit 130' INT TERM

# Start script execution
main
